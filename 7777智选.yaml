# 机场
proxy-providers:
  Airport1:
    url: "http://10.10.10.6:3001/CKg2abstVnOeRpm1aB4G/download/7?target=ClashMeta"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🇨🇳 直连

# 节点信息
proxies:
  - {name: 🇨🇳 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run  ，裸核跑改为/etc/mihomo/run
# 因容易造成新手面板启动问题，我注释掉了，需要的自行开启
external-controller: '[::]:9090'
secret: "831926"
external-ui: "/etc/nikki/run"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/releases/latest/download/dist-cdn-fonts.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  #system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - '00001987.xyz'
    - '*.00001987.xyz'
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 61.153.177.196
    - 61.153.177.197
 
# 出站策略
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [ ♻️ 智能选择, ♻️ 自动选择, 🌐 自选节点, 🇭🇰 香港智能, 🇸🇬 狮城智能, 🇭🇰 香港自动, 🇼🇸 台湾自动, 🇸🇬 狮城自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇨🇳 直连]}
  - {name: ♻️ 智能选择, type: smart, uselightgbm: true, collectdata: false, include-all: true, interval: 300, filter: "(?i)(香港|hk|新加坡|sg)"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "^((?!(🇨🇳 直连)).)*$"}
  - {name: 🌐 自选节点, type: select, include-all: true, filter: "^((?!(🇨🇳 直连)).)*$"}
  - {name: 🤖 ChatGPT, type: url-test, tolerance: 30, interval: 300, proxies: [ 🇼🇸 台湾自动, 🇸🇬 狮城自动, 🇯🇵 日本自动, 🇰🇷 韩国自动]}
  - {name: 📹 YouTube, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点]}
  - {name: 🍀 Google, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点]}
  - {name: 🎵 TikTok, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点]}
  - {name: 📲 Telegram, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点]}
  - {name: 🎥 NETFLIX, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点]}
  - {name: 💶 PayPal, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点]}
  - {name: ✈️ Speedtest, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点,🇨🇳 直连]}
  - {name: 🐬 OneDrive, type: select, proxies: [🇨🇳 直连, 🌐 自选节点, 🚀 默认代理]}
  - {name: 🪟 Microsoft, type: select, proxies: [🇨🇳 直连, 🌐 自选节点, 🚀 默认代理]}
  - {name: 🍎 Apple, type: select, proxies: [🇨🇳 直连, 🌐 自选节点, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [🇨🇳 直连, 🌐 自选节点, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [ 🚀 默认代理, 🌐 自选节点,🇨🇳 直连]}
  - {name: 🇭🇰 香港自动, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?i)(香港|hk)" }
  - {name: 🇼🇸 台湾自动, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?i)(台湾|民国|tw)" }
  - {name: 🇸🇬 狮城自动, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?i)(新加坡|sg)" }
  - {name: 🇯🇵 日本自动, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?i)(日本|jp)" }
  - {name: 🇰🇷 韩国自动, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?i)(韩国|sk)" }
  - {name: 🇭🇰 香港智能, type: smart, uselightgbm: true, collectdata: false, include-all: true, interval: 300, filter: "(?i)(香港|hk)" }
  - {name: 🇸🇬 狮城智能, type: smart, uselightgbm: true, collectdata: false, include-all: true, interval: 300, filter: "(?i)(新加坡|sg)" }
  #- {name: 🇯🇵 日本智能, type: smart, uselightgbm: true, collectdata: false, include-all: true, interval: 300, filter: "(?i)(日本|jp)" }
  #- {name: ♻️ 台湾智能, type: smart, uselightgbm: true, collectdata: false, include-all: true, interval: 300, filter: "(?i)(台湾|tw)" }
  
#规则组
rules:
  - DOMAIN-SUFFIX,pathofexile.com,🇨🇳 直连
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理
  - RULE-SET,private_domain,🇨🇳 直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}



